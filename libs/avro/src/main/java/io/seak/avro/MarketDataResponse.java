/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.seak.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MarketDataResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3117232132659038149L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MarketDataResponse\",\"namespace\":\"io.seak.avro\",\"fields\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"MarketData\",\"fields\":[{\"name\":\"open\",\"type\":\"double\"},{\"name\":\"high\",\"type\":\"double\"},{\"name\":\"low\",\"type\":\"double\"},{\"name\":\"close\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"int\"}]}}},{\"name\":\"requestId\",\"type\":\"string\"},{\"name\":\"marketDataEntries\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"MarketDataEntry\",\"symbols\":[\"LOW\",\"HIGH\",\"OPEN\",\"CLOSE\"]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MarketDataResponse> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MarketDataResponse> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MarketDataResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MarketDataResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MarketDataResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MarketDataResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MarketDataResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MarketDataResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MarketDataResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence username;
  private java.lang.CharSequence symbol;
  private java.util.List<io.seak.avro.MarketData> data;
  private java.lang.CharSequence requestId;
  private java.util.List<io.seak.avro.MarketDataEntry> marketDataEntries;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MarketDataResponse() {}

  /**
   * All-args constructor.
   * @param username The new value for username
   * @param symbol The new value for symbol
   * @param data The new value for data
   * @param requestId The new value for requestId
   * @param marketDataEntries The new value for marketDataEntries
   */
  public MarketDataResponse(java.lang.CharSequence username, java.lang.CharSequence symbol, java.util.List<io.seak.avro.MarketData> data, java.lang.CharSequence requestId, java.util.List<io.seak.avro.MarketDataEntry> marketDataEntries) {
    this.username = username;
    this.symbol = symbol;
    this.data = data;
    this.requestId = requestId;
    this.marketDataEntries = marketDataEntries;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return symbol;
    case 2: return data;
    case 3: return requestId;
    case 4: return marketDataEntries;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.CharSequence)value$; break;
    case 1: symbol = (java.lang.CharSequence)value$; break;
    case 2: data = (java.util.List<io.seak.avro.MarketData>)value$; break;
    case 3: requestId = (java.lang.CharSequence)value$; break;
    case 4: marketDataEntries = (java.util.List<io.seak.avro.MarketDataEntry>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.List<io.seak.avro.MarketData> getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.List<io.seak.avro.MarketData> value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return The value of the 'requestId' field.
   */
  public java.lang.CharSequence getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.CharSequence value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'marketDataEntries' field.
   * @return The value of the 'marketDataEntries' field.
   */
  public java.util.List<io.seak.avro.MarketDataEntry> getMarketDataEntries() {
    return marketDataEntries;
  }


  /**
   * Sets the value of the 'marketDataEntries' field.
   * @param value the value to set.
   */
  public void setMarketDataEntries(java.util.List<io.seak.avro.MarketDataEntry> value) {
    this.marketDataEntries = value;
  }

  /**
   * Creates a new MarketDataResponse RecordBuilder.
   * @return A new MarketDataResponse RecordBuilder
   */
  public static io.seak.avro.MarketDataResponse.Builder newBuilder() {
    return new io.seak.avro.MarketDataResponse.Builder();
  }

  /**
   * Creates a new MarketDataResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MarketDataResponse RecordBuilder
   */
  public static io.seak.avro.MarketDataResponse.Builder newBuilder(io.seak.avro.MarketDataResponse.Builder other) {
    if (other == null) {
      return new io.seak.avro.MarketDataResponse.Builder();
    } else {
      return new io.seak.avro.MarketDataResponse.Builder(other);
    }
  }

  /**
   * Creates a new MarketDataResponse RecordBuilder by copying an existing MarketDataResponse instance.
   * @param other The existing instance to copy.
   * @return A new MarketDataResponse RecordBuilder
   */
  public static io.seak.avro.MarketDataResponse.Builder newBuilder(io.seak.avro.MarketDataResponse other) {
    if (other == null) {
      return new io.seak.avro.MarketDataResponse.Builder();
    } else {
      return new io.seak.avro.MarketDataResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for MarketDataResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MarketDataResponse>
    implements org.apache.avro.data.RecordBuilder<MarketDataResponse> {

    private java.lang.CharSequence username;
    private java.lang.CharSequence symbol;
    private java.util.List<io.seak.avro.MarketData> data;
    private java.lang.CharSequence requestId;
    private java.util.List<io.seak.avro.MarketDataEntry> marketDataEntries;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.seak.avro.MarketDataResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.requestId)) {
        this.requestId = data().deepCopy(fields()[3].schema(), other.requestId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.marketDataEntries)) {
        this.marketDataEntries = data().deepCopy(fields()[4].schema(), other.marketDataEntries);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing MarketDataResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(io.seak.avro.MarketDataResponse other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.requestId)) {
        this.requestId = data().deepCopy(fields()[3].schema(), other.requestId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marketDataEntries)) {
        this.marketDataEntries = data().deepCopy(fields()[4].schema(), other.marketDataEntries);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.List<io.seak.avro.MarketData> getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder setData(java.util.List<io.seak.avro.MarketData> value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder setRequestId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.requestId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'requestId' field.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketDataEntries' field.
      * @return The value.
      */
    public java.util.List<io.seak.avro.MarketDataEntry> getMarketDataEntries() {
      return marketDataEntries;
    }


    /**
      * Sets the value of the 'marketDataEntries' field.
      * @param value The value of 'marketDataEntries'.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder setMarketDataEntries(java.util.List<io.seak.avro.MarketDataEntry> value) {
      validate(fields()[4], value);
      this.marketDataEntries = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'marketDataEntries' field has been set.
      * @return True if the 'marketDataEntries' field has been set, false otherwise.
      */
    public boolean hasMarketDataEntries() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'marketDataEntries' field.
      * @return This builder.
      */
    public io.seak.avro.MarketDataResponse.Builder clearMarketDataEntries() {
      marketDataEntries = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MarketDataResponse build() {
      try {
        MarketDataResponse record = new MarketDataResponse();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (java.util.List<io.seak.avro.MarketData>) defaultValue(fields()[2]);
        record.requestId = fieldSetFlags()[3] ? this.requestId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.marketDataEntries = fieldSetFlags()[4] ? this.marketDataEntries : (java.util.List<io.seak.avro.MarketDataEntry>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MarketDataResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<MarketDataResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MarketDataResponse>
    READER$ = (org.apache.avro.io.DatumReader<MarketDataResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.username);

    out.writeString(this.symbol);

    long size0 = this.data.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (io.seak.avro.MarketData e0: this.data) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.requestId);

    long size1 = this.marketDataEntries.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (io.seak.avro.MarketDataEntry e1: this.marketDataEntries) {
      actualSize1++;
      out.startItem();
      out.writeEnum(e1.ordinal());
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);

      long size0 = in.readArrayStart();
      java.util.List<io.seak.avro.MarketData> a0 = this.data;
      if (a0 == null) {
        a0 = new SpecificData.Array<io.seak.avro.MarketData>((int)size0, SCHEMA$.getField("data").schema());
        this.data = a0;
      } else a0.clear();
      SpecificData.Array<io.seak.avro.MarketData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.seak.avro.MarketData>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          io.seak.avro.MarketData e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new io.seak.avro.MarketData();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.requestId = in.readString(this.requestId instanceof Utf8 ? (Utf8)this.requestId : null);

      long size1 = in.readArrayStart();
      java.util.List<io.seak.avro.MarketDataEntry> a1 = this.marketDataEntries;
      if (a1 == null) {
        a1 = new SpecificData.Array<io.seak.avro.MarketDataEntry>((int)size1, SCHEMA$.getField("marketDataEntries").schema());
        this.marketDataEntries = a1;
      } else a1.clear();
      SpecificData.Array<io.seak.avro.MarketDataEntry> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<io.seak.avro.MarketDataEntry>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          io.seak.avro.MarketDataEntry e1 = (ga1 != null ? ga1.peek() : null);
          e1 = io.seak.avro.MarketDataEntry.values()[in.readEnum()];
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 1:
          this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<io.seak.avro.MarketData> a0 = this.data;
          if (a0 == null) {
            a0 = new SpecificData.Array<io.seak.avro.MarketData>((int)size0, SCHEMA$.getField("data").schema());
            this.data = a0;
          } else a0.clear();
          SpecificData.Array<io.seak.avro.MarketData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.seak.avro.MarketData>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              io.seak.avro.MarketData e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new io.seak.avro.MarketData();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.requestId = in.readString(this.requestId instanceof Utf8 ? (Utf8)this.requestId : null);
          break;

        case 4:
          long size1 = in.readArrayStart();
          java.util.List<io.seak.avro.MarketDataEntry> a1 = this.marketDataEntries;
          if (a1 == null) {
            a1 = new SpecificData.Array<io.seak.avro.MarketDataEntry>((int)size1, SCHEMA$.getField("marketDataEntries").schema());
            this.marketDataEntries = a1;
          } else a1.clear();
          SpecificData.Array<io.seak.avro.MarketDataEntry> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<io.seak.avro.MarketDataEntry>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              io.seak.avro.MarketDataEntry e1 = (ga1 != null ? ga1.peek() : null);
              e1 = io.seak.avro.MarketDataEntry.values()[in.readEnum()];
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










