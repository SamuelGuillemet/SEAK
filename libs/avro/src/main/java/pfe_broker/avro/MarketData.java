/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pfe_broker.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MarketData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7647647996371877075L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MarketData\",\"namespace\":\"pfe_broker.avro\",\"fields\":[{\"name\":\"open\",\"type\":\"float\"},{\"name\":\"high\",\"type\":\"float\"},{\"name\":\"low\",\"type\":\"float\"},{\"name\":\"close\",\"type\":\"float\"},{\"name\":\"volume\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MarketData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MarketData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MarketData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MarketData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MarketData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MarketData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MarketData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MarketData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MarketData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private float open;
  private float high;
  private float low;
  private float close;
  private int volume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MarketData() {}

  /**
   * All-args constructor.
   * @param open The new value for open
   * @param high The new value for high
   * @param low The new value for low
   * @param close The new value for close
   * @param volume The new value for volume
   */
  public MarketData(java.lang.Float open, java.lang.Float high, java.lang.Float low, java.lang.Float close, java.lang.Integer volume) {
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.volume = volume;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return open;
    case 1: return high;
    case 2: return low;
    case 3: return close;
    case 4: return volume;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: open = (java.lang.Float)value$; break;
    case 1: high = (java.lang.Float)value$; break;
    case 2: low = (java.lang.Float)value$; break;
    case 3: close = (java.lang.Float)value$; break;
    case 4: volume = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public float getOpen() {
    return open;
  }


  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(float value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public float getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(float value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return The value of the 'low' field.
   */
  public float getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   * @param value the value to set.
   */
  public void setLow(float value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public float getClose() {
    return close;
  }


  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(float value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public int getVolume() {
    return volume;
  }


  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(int value) {
    this.volume = value;
  }

  /**
   * Creates a new MarketData RecordBuilder.
   * @return A new MarketData RecordBuilder
   */
  public static pfe_broker.avro.MarketData.Builder newBuilder() {
    return new pfe_broker.avro.MarketData.Builder();
  }

  /**
   * Creates a new MarketData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MarketData RecordBuilder
   */
  public static pfe_broker.avro.MarketData.Builder newBuilder(pfe_broker.avro.MarketData.Builder other) {
    if (other == null) {
      return new pfe_broker.avro.MarketData.Builder();
    } else {
      return new pfe_broker.avro.MarketData.Builder(other);
    }
  }

  /**
   * Creates a new MarketData RecordBuilder by copying an existing MarketData instance.
   * @param other The existing instance to copy.
   * @return A new MarketData RecordBuilder
   */
  public static pfe_broker.avro.MarketData.Builder newBuilder(pfe_broker.avro.MarketData other) {
    if (other == null) {
      return new pfe_broker.avro.MarketData.Builder();
    } else {
      return new pfe_broker.avro.MarketData.Builder(other);
    }
  }

  /**
   * RecordBuilder for MarketData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MarketData>
    implements org.apache.avro.data.RecordBuilder<MarketData> {

    private float open;
    private float high;
    private float low;
    private float close;
    private int volume;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pfe_broker.avro.MarketData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.open)) {
        this.open = data().deepCopy(fields()[0].schema(), other.open);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.high)) {
        this.high = data().deepCopy(fields()[1].schema(), other.high);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.low)) {
        this.low = data().deepCopy(fields()[2].schema(), other.low);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.close)) {
        this.close = data().deepCopy(fields()[3].schema(), other.close);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing MarketData instance
     * @param other The existing instance to copy.
     */
    private Builder(pfe_broker.avro.MarketData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.open)) {
        this.open = data().deepCopy(fields()[0].schema(), other.open);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.high)) {
        this.high = data().deepCopy(fields()[1].schema(), other.high);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.low)) {
        this.low = data().deepCopy(fields()[2].schema(), other.low);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.close)) {
        this.close = data().deepCopy(fields()[3].schema(), other.close);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public float getOpen() {
      return open;
    }


    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder setOpen(float value) {
      validate(fields()[0], value);
      this.open = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder clearOpen() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public float getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder setHigh(float value) {
      validate(fields()[1], value);
      this.high = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder clearHigh() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * @return The value.
      */
    public float getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * @param value The value of 'low'.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder setLow(float value) {
      validate(fields()[2], value);
      this.low = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'low' field.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder clearLow() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public float getClose() {
      return close;
    }


    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder setClose(float value) {
      validate(fields()[3], value);
      this.close = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder clearClose() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public int getVolume() {
      return volume;
    }


    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder setVolume(int value) {
      validate(fields()[4], value);
      this.volume = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public pfe_broker.avro.MarketData.Builder clearVolume() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MarketData build() {
      try {
        MarketData record = new MarketData();
        record.open = fieldSetFlags()[0] ? this.open : (java.lang.Float) defaultValue(fields()[0]);
        record.high = fieldSetFlags()[1] ? this.high : (java.lang.Float) defaultValue(fields()[1]);
        record.low = fieldSetFlags()[2] ? this.low : (java.lang.Float) defaultValue(fields()[2]);
        record.close = fieldSetFlags()[3] ? this.close : (java.lang.Float) defaultValue(fields()[3]);
        record.volume = fieldSetFlags()[4] ? this.volume : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MarketData>
    WRITER$ = (org.apache.avro.io.DatumWriter<MarketData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MarketData>
    READER$ = (org.apache.avro.io.DatumReader<MarketData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFloat(this.open);

    out.writeFloat(this.high);

    out.writeFloat(this.low);

    out.writeFloat(this.close);

    out.writeInt(this.volume);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.open = in.readFloat();

      this.high = in.readFloat();

      this.low = in.readFloat();

      this.close = in.readFloat();

      this.volume = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.open = in.readFloat();
          break;

        case 1:
          this.high = in.readFloat();
          break;

        case 2:
          this.low = in.readFloat();
          break;

        case 3:
          this.close = in.readFloat();
          break;

        case 4:
          this.volume = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










