plugins {
    id "com.github.johnrengelman.shadow"
    id "io.micronaut.application"
    id "jacoco"
}

ext {
    configFiles = "classpath:application.yml,classpath:kafka.yml,classpath:redis.yml,classpath:monitoring.yml"
}

version = "${version}"
group = "io.seak"

repositories {
    mavenCentral()
    maven { url confluentUrl }
}

dependencies {
    implementation project(":libs:log")
    implementation project(":libs:avro")
    implementation project(":libs:common")

    // Micronaut
    runtimeOnly libs.snakeyaml
    implementation libs.micronaut.kafka
    implementation libs.micronaut.redis.lettuce

    // Micrometer
    implementation libs.micronaut.micrometer.registry.prometheus
    annotationProcessor libs.micronaut.micrometer.annotation
    implementation libs.micronaut.http.client
    implementation libs.micronaut.management

    // Avro
    implementation libs.kafka.avro.serializer

    // Log4J
    implementation libs.log4j.core
    runtimeOnly libs.log4j.api
    runtimeOnly libs.log4j.slf4j2.impl

    // Test dependencies
    testImplementation libs.awaitility
    testImplementation libs.assertj.core
    testImplementation libs.testcontainers.junit.jupiter
}

application {
    mainClass.set("io.seak.order_book.Application")
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", project(":").file("config/common").path]
        }
    }
    test {
        resources {
            srcDirs = ["src/test/resources", project(":").file("config/common").path]
        }
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion("${javaVersion}")
    targetCompatibility = JavaVersion.toVersion("${javaVersion}")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.seak.order_book.*")
    }
}


test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

[Test, JavaExec].each { targetType ->
    tasks.withType(targetType) { task ->
        task.systemProperty "micronaut.config.files", configFiles
    }
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
	}
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Application.class',
            ])
        }))
    }
}
