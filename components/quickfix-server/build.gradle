plugins {
    id "com.github.johnrengelman.shadow"
    id "io.micronaut.application"
    id "jacoco"
}

ext {
    configFiles = "classpath:application.yml,classpath:kafka.yml,classpath:quickfix.yml,classpath:data.yml,classpath:monitoring.yml"
}

version = "${version}"
group = "pfe_broker"

repositories {
    mavenCentral()
    maven { url confluentUrl }
}

dependencies {
    implementation project(":libs:log")
    implementation project(":libs:avro")
    implementation project(":libs:models")
    implementation project(":libs:common")

    // Micronaut
    runtimeOnly libs.snakeyaml
    implementation libs.micronaut.kafka

    // Micrometer
    implementation libs.micronaut.micrometer.registry.prometheus
    annotationProcessor libs.micronaut.micrometer.annotation
    implementation libs.micronaut.http.client
    implementation libs.micronaut.management

    // Database
    implementation libs.micronaut.data.hibernate.jpa

    // Authentication dependencies
    implementation libs.spring.security.crypto

    // QuickFixJ
    implementation libs.quickfixj.core
    implementation libs.quickfixj.messages.all

    // Avro
    implementation libs.kafka.avro.serializer

    // Log4J
    implementation libs.log4j.core
    runtimeOnly libs.log4j.api
    runtimeOnly libs.log4j.slf4j2.impl
    runtimeOnly libs.jcl.over.slf4j

    // Test dependencies
    testImplementation libs.awaitility
    testImplementation libs.assertj.core
    testImplementation libs.testcontainers.junit.jupiter
    testImplementation libs.testcontainers.postgresql
}

application {
    mainClass.set("pfe_broker.quickfix_server.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("${javaVersion}")
    targetCompatibility = JavaVersion.toVersion("${javaVersion}")
}

sourceSets {
    main {
        resources {
            srcDirs = [
                "src/main/resources",
                project(":").file("config/common").path,
                project(":").file("config/quickfix").path
            ]
        }
    }
    test {
        resources {
            srcDirs = [
                "src/test/resources",
                project(":").file("config/common").path,
                project(":").file("config/quickfix").path
            ]
        }
    }
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("pfe_broker.quickfix_server.*")
    }
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

[Test, JavaExec].each { targetType ->
    tasks.withType(targetType) { task ->
        task.systemProperty "micronaut.config.files", configFiles
    }
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
	}

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Application.class',
            ])
        }))
    }
}
